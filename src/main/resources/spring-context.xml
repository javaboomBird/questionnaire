<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:jdbc="http://www.springframework.org/schema/jdbc"
  xmlns:jee="http://www.springframework.org/schema/jee"
  xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:util="http://www.springframework.org/schema/util"
  xmlns:task="http://www.springframework.org/schema/task" xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd"
  default-lazy-init="true">

  <description>Spring Configuration</description>

  <!-- 加载配置属性文件 -->
  <context:property-placeholder ignore-unresolvable="true"
    location="classpath:rapid-development.properties"/>

  <!-- 加载应用属性实例，可通过  @Value("#{APP_PROP['jdbc.driver']}") String jdbcDriver 方式引用 -->
  <util:properties id="APP_PROP" location="classpath:rapid-development.properties"
    local-override="true"/>

  <!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
  <context:component-scan base-package="com.create80.rd"><!-- base-package 如果多个，用“,”分隔 -->
    <context:exclude-filter type="annotation"
      expression="org.springframework.stereotype.Controller"/>
  </context:component-scan>

  <!-- MyBatis begin -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <property name="typeAliasesPackage" value="com.create80.rd"/>
    <property name="typeAliasesSuperType" value="com.create80.rd.common.persistence.BaseEntity"/>
    <property name="mapperLocations" value="classpath:/mappings/**/*.xml"/>
    <property name="configLocation" value="classpath:/mybatis-config.xml"></property>
  </bean>

  <!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
  <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    <property name="basePackage" value="com.create80.rd"/>
    <property name="annotationClass"
      value="com.create80.rd.common.persistence.annotation.MyBatisDao"/>
  </bean>


  <context:component-scan base-package="com.create80.rd"></context:component-scan>

  <!-- 定义事务 -->
  <bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
  <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
  <!-- MyBatis end -->

  <!-- 配置 JSR303 Bean Validator 定义 -->
  <bean id="validator"
    class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>

  <!-- 缓存配置 -->
  <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
    <property name="configLocation" value="classpath:${ehcache.configFile}"/>
  </bean>

  <!--实例化resttemplate对象-->
  <bean id="restTemplate" class="org.springframework.web.client.RestTemplate"></bean>

  <!-- 计划任务配置，用 @Service @Lazy(false)标注类，用@Scheduled(cron = "0 0 2 * * ?")标注方法 -->
  <task:executor id="executor" pool-size="10"/>
  <task:scheduler id="scheduler" pool-size="10"/>
  <task:annotation-driven scheduler="scheduler" executor="executor" proxy-target-class="true"/>

  <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
    <property name="driverClassName" value="${jdbc.driver}"/>
    <property name="jdbcUrl" value="${jdbc.url}"/>
    <property name="username" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>
    <!-- 连接只读数据库时配置为true， 保证安全 -->
    <property name="readOnly" value="false"/>
    <!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
    <property name="connectionTimeout" value="30000"/>
    <!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->
    <property name="idleTimeout" value="600000"/>
    <!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL
        wait_timeout参数（show variables like '%timeout%';） -->
    <property name="maxLifetime" value="1800000"/>
    <!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->
    <property name="maximumPoolSize" value="10"/>

    <property name="minimumIdle" value="10"/>

  </bean>
  <!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
  <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> -->
  <!--&lt;!&ndash; 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass &ndash;&gt;-->
  <!--<property name="driverClassName" value="${jdbc.driver}" />-->
  <!---->
  <!--&lt;!&ndash; 基本属性 url、user、password &ndash;&gt;-->
  <!--<property name="url" value="${jdbc.url}" />-->
  <!--<property name="username" value="${jdbc.username}" />-->
  <!--<property name="password" value="${jdbc.password}" />-->
  <!---->
  <!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
  <!--<property name="initialSize" value="${jdbc.pool.init}" />-->
  <!--<property name="minIdle" value="${jdbc.pool.minIdle}" /> -->
  <!--<property name="maxActive" value="${jdbc.pool.maxActive}" />-->
  <!---->
  <!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
  <!--<property name="maxWait" value="60000" />-->
  <!---->
  <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
  <!--<property name="timeBetweenEvictionRunsMillis" value="60000" />-->
  <!---->
  <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
  <!--<property name="minEvictableIdleTimeMillis" value="300000" />-->
  <!---->
  <!--<property name="validationQuery" value="${jdbc.testSql}" />-->
  <!--<property name="testWhileIdle" value="true" />-->
  <!--<property name="testOnBorrow" value="false" />-->
  <!--<property name="testOnReturn" value="false" />-->
  <!---->
  <!--&lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）-->
  <!--<property name="poolPreparedStatements" value="true" />-->
  <!--<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> &ndash;&gt;-->
  <!---->
  <!--&lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;-->
  <!--<property name="filters" value="stat" /> -->
  <!--</bean>-->

  <!-- 数据源配置, 使用应用服务器的数据库连接池
  <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/jeesite" />-->

  <!-- 数据源配置, 不使用连接池
  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="${jdbc.driver}" />
    <property name="url" value="${jdbc.url}" />
    <property name="username" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>
  </bean>-->

</beans>