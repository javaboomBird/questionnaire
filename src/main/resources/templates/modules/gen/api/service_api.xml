<?xml version="1.0" encoding="utf-8"?>
<template>
  <name>service</name>
  <filePath>src/main/java/${packageName}/${moduleName}/api/service/${subModuleName}</filePath>
  <fileName>${ClassName}Service.java</fileName>
  <content><![CDATA[
/**
 * Copyright &copy; 2012-2016  All rights reserved.
 */
package ${packageName}.${moduleName}.api.service<#if subModuleName != "">.${subModuleName}</#if>;

import com.github.pagehelper.PageHelper;

import java.util.List;
import java.util.UUID;
import org.apache.commons.lang3.StringUtils;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import ${packageName}.${moduleName}.api.model<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.api.client<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Mapper;

/**
 * ${functionName}Service
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Service
@Transactional(readOnly = true,rollbackFor = Exception.class)
public class ${ClassName}Service {

   @Autowired
   private ${ClassName}Mapper ${className}Mapper;

	public ${ClassName} get(String id) {
		 return ${className}Mapper.selectByPrimaryKey(id);
	}

	/**
   * 分页查询 pageNum<0&&pageSize<0 ,则查询全部
   * @param pageNum
   * @param pageSize
   * @param ${className}
   * @return
   */
	public List<${ClassName}> findList(int pageNum, int pageSize,${ClassName} ${className}) {

     if (${className} == null) {
      ${className} = new ${ClassName}();
    }
    ${className}.setIsDeleted("N");
    if (pageNum < 0 && pageSize < 0) {
      //查询全部
      PageHelper.startPage(pageNum, 0,true,null,true);
    } else {
      PageHelper.startPage(pageNum, pageSize);
    }

    return ${className}Mapper.selectBySelective(${className});
	}
	

	@Transactional(readOnly = false,rollbackFor = Exception.class)
	public void save(${ClassName} ${className}) {
		if (StringUtils.isNotEmpty(${className}.getId())) {
      ${className}Mapper.updateByPrimaryKey(${className});
    } else {
      ${className}.setId(uuid());
      ${className}Mapper.insertSelective(${className});
    }
	}
	
	@Transactional(readOnly = false,rollbackFor = Exception.class)
	public void delete(${ClassName} ${className}) {
		${className}.setIsDeleted("Y");
    ${className}Mapper.updateByPrimaryKeySelective(${className});
	}

	/**
   * * 封装JDK自带的UUID, 通过Random数字生成, 中间无-分割.
   */
	public static String uuid() {
    return UUID.randomUUID().toString().replaceAll("-", "");
  }
	
}]]>
  </content>
</template>