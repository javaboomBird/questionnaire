<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>service</name>
	<filePath>src/main/java/${packageName}/${moduleName}/api/service/${subModuleName}</filePath>
	<fileName>${ClassName}Service.java</fileName>
	<content><![CDATA[
/**
 * Copyright &copy; 2012-2016  All rights reserved.
 */
package ${packageName}.${moduleName}.api.service<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.apache.commons.lang3.StringUtils;
import com.github.pagehelper.PageHelper;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


import ${packageName}.${moduleName}.api.model<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};
import ${packageName}.${moduleName}.api.client<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Mapper;
<#list table.childList as c>
import ${packageName}.${moduleName}.api.model<#if subModuleName != "">.${subModuleName}</#if>.${c.className?cap_first};
import ${packageName}.${moduleName}.api.client<#if subModuleName != "">.${subModuleName}</#if>.${c.className?cap_first}Mapper;
</#list>

/**
 * ${functionName}Service
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Service
@Transactional(readOnly = true,rollbackFor = Exception.class)
public class ${ClassName}Service {

   @Autowired
   private ${ClassName}Mapper ${className}Mapper;

	<#list table.childList as c>
	@Autowired
	 private ${c.className?cap_first}Mapper ${c.className?uncap_first}Mapper;
	</#list>
	
	public ${ClassName} get(String id) {
		${ClassName} ${className} = ${className}Mapper.selectByPrimaryKey(id);
		return ${className};
	}
	
	public List<${ClassName}> findList(int pageNum, int pageSize,${ClassName} ${className}) {
		if (${className} == null) {
      ${className} = new ${ClassName}();
    }
    ${className}.setIsDeleted("N");
    if (pageNum < 0 && pageSize < 0) {
      //查询全部
      PageHelper.startPage(pageNum, 0,true,null,true);
    } else {
      PageHelper.startPage(pageNum, pageSize);
    }

    return ${className}Mapper.selectBySelective(${className});
	}
	
	@Transactional(readOnly = false,rollbackFor = Exception.class)
	public void save(${ClassName} ${className}) {

     if (StringUtils.isNotEmpty(${className}.getId())) {
      ${className}Mapper.updateByPrimaryKeySelective(${className});
     <#list table.childList as c>
      if (StringUtils.isNotEmpty(${className}.getId())) {
        delete${ClassName}${c.className?cap_first}ById(${className}.getId());
      }
      List<${c.className?cap_first}> ${c.className?uncap_first}List = ${className}.get${c.className?cap_first}List();
      if (${c.className?uncap_first}List.size() > 0 && ${c.className?uncap_first}List != null) {
        List<${c.className?cap_first}> insertOrUpdate${c.className?cap_first} = new ArrayList<>();
        ${c.className?uncap_first}List.stream().forEach(${c.className?uncap_first} -> {
          String delFlag = ${c.className?uncap_first}.getIsDeleted();
          if ("N".equals(delFlag)) {
            ${c.className?uncap_first}.setId(uuid());
            ${c.className?uncap_first}.set${tuofeng(c.parentTableFk)}(${className}.getId());
            insertOrUpdate${c.className?cap_first}.add(${c.className?uncap_first});
          }
        });
        if (insertOrUpdate${c.className?cap_first}.size() > 0) {
          ${c.className?uncap_first}Mapper.insertBatchSelective(insertOrUpdate${c.className?cap_first});
        }
      }
      </#list>
    } else {
      ${className}.setId(uuid());
      ${className}Mapper.insertSelective(${className});
      <#list table.childList as c>
      List<${c.className?cap_first}> ${c.className?uncap_first}List = ${className}.get${c.className?cap_first}List();
      if (${c.className?uncap_first}List != null && ${c.className?uncap_first}List.size() > 0) {
        ${c.className?uncap_first}List.stream().forEach(${c.className?uncap_first} -> {
          ${c.className?uncap_first}.setId(uuid());
          ${c.className?uncap_first}.set${tuofeng(c.parentTableFk)}(${className}.getId());
        });
        ${c.className?uncap_first}Mapper.insertBatchSelective(${c.className?uncap_first}List);
      }
      </#list>
    }

	}
	
	@Transactional(readOnly = false,rollbackFor = Exception.class)
	public void delete(${ClassName} ${className}) {

	  ${className}.setIsDeleted("Y");
    ${className}Mapper.updateByPrimaryKeySelective(${className});

	<#list table.childList as c>
	   delete${ClassName}${c.className?cap_first}ById(${className}.getId());
	</#list>

	}

	/**
   * * 封装JDK自带的UUID, 通过Random数字生成, 中间无-分割.
   */
	public static String uuid() {
    return UUID.randomUUID().toString().replaceAll("-", "");
  }

  <#list table.childList as c>
     private void delete${ClassName}${c.className?cap_first}ById(String id) {
     List<${c.className?cap_first}> ${c.className?uncap_first}List = ${className}Mapper.selectByPrimaryKey(id).get${c.className?cap_first}List();
     if (${c.className?uncap_first}List != null && ${c.className?uncap_first}List.size() > 0) {
      ${c.className?uncap_first}List.stream().forEach(${c.className?uncap_first} -> {
        ${c.className?uncap_first}.setIsDeleted("Y");
      });
       ${c.className?uncap_first}Mapper.updateBatchByPrimaryKeySelective(${c.className?uncap_first}List);
      }
     }
  </#list>


	
}]]>
	</content>
</template>