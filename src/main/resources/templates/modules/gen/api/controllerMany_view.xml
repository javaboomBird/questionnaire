<?xml version="1.0" encoding="utf-8"?>
<template>
  <name>controller</name>
  <filePath>src/main/java/${packageName}/${moduleName}/web/${subModuleName}</filePath>
  <fileName>${ClassName}ViewController.java</fileName>
  <content><![CDATA[
/**
 * Copyright &copy; 2012-2016  All rights reserved.
 */
package ${packageName}.${moduleName}.web<#if subModuleName != "">.${subModuleName}</#if>;

import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.Date;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.lang.reflect.InvocationTargetException;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.web.client.RestTemplate;
import org.springframework.beans.BeanUtils;
import org.springframework.http.ResponseEntity;

import com.create80.rd.modules.sys.entity.User;
import com.create80.rd.modules.sys.utils.UserUtils;
import com.create80.rd.common.config.Global;
import com.create80.rd.common.persistence.Page;
import com.create80.rd.common.web.BaseController;
import com.create80.rd.common.utils.StringUtils;
import com.create80.rd.common.utils.JsonUtils;
import com.create80.rd.common.utils.DateUtils;
import com.create80.rd.common.utils.page.PageInfo;

import ${packageName}.${moduleName}.entity<#if subModuleName != "">.${subModuleName}</#if>.${ClassName}Entity;
import ${packageName}.${moduleName}.api.model<#if subModuleName != "">.${subModuleName}</#if>.${ClassName};

<#list table.serviceImports as import>
   import ${import};
 </#list>

/**
 * ${functionName}Controller
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Controller
@RequestMapping(value = "${r"${adminPath}"}/${urlPrefix}")
public class ${ClassName}ViewController extends BaseController {

	@Autowired
  private RestTemplate restTemplate;

  <#list table.importServiceNames?keys as key>
  @Autowired
   private ${table.importServiceNames[key]?cap_first}Service ${table.importServiceNames[key]?uncap_first}Service;
  </#list>
	
	@ModelAttribute
	public ${ClassName}Entity get(@RequestParam(required=false) String id) {

		${ClassName}Entity entity = new ${ClassName}Entity();
    if (StringUtils.isNotBlank(id)) {
      String apiBaseUrl = moduleLinkConfiguration.getLink("${moduleName}");
      Map<String, Object> urlVariables = new HashMap<>();
      urlVariables.put("id", id);
      ResponseEntity<String> responseEntity = restTemplate
          .getForEntity(apiBaseUrl + "/${urlPrefix}/api/{id}", String.class,
              urlVariables);

      entity= JsonUtils.toSimpleObject(responseEntity.getBody(), ${ClassName}Entity.class);

       <#list table.importServiceNames?keys as key>
        entity.set${key?cap_first}(${table.importServiceNames[key]?uncap_first}Service.get(entity.get${key?cap_first}Id()));
       </#list>
    }
    return entity;
	}
	
	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = {"list", ""})
	public String list(${ClassName}Entity ${className}, HttpServletRequest request, HttpServletResponse response, Model model) {

     Page<${ClassName}> page = new Page<>(request, response);
    ${ClassName} type = JsonUtils
        .toSimpleObject(JsonUtils.toJson(${className}), ${ClassName}.class);


    Map<String, Object> urlVariables = new HashMap<>();
    urlVariables.put("pageNum", page.getPageNo());
    urlVariables.put("pageSize", page.getPageSize());

    String apiBaseUrl = moduleLinkConfiguration.getLink("${moduleName}");
    ResponseEntity<String> pageResponseEntity = restTemplate
        .postForEntity(
            apiBaseUrl + "/${urlPrefix}/api/list?pageNum={pageNum}&&pageSize={pageSize}",
            type, String.class, urlVariables);

    PageInfo<${ClassName}> ${className}PageInfo = JsonUtils
        .fromJson(pageResponseEntity.getBody(), PageInfo.class, ${ClassName}.class);


    page.setCount(${className}PageInfo.getTotal());
    page.setPageNo(${className}PageInfo.getPageNum());
    page.setList(${className}PageInfo.getList());
    model.addAttribute("page", page);
    model.addAttribute("${className}", ${className});

		return "${lastPackageName}/${viewPrefix}List";
	}

	@RequiresPermissions("${permissionPrefix}:view")
	@RequestMapping(value = "form")
	public String form(${ClassName}Entity ${className}, Model model) {
		model.addAttribute("${className}", ${className});
		return "${lastPackageName}/${viewPrefix}Form";
	}

	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "save")
	public String save(${ClassName}Entity ${className}, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, ${className})){
			return form(${className}, model);
		}

	  ${ClassName} type = resolveBeanProperties(StringUtils.isEmpty(${className}.getId()), ${className});
    String apiBaseUrl = moduleLinkConfiguration.getLink("${moduleName}");

	 	restTemplate.postForObject(apiBaseUrl+"/${urlPrefix}/api/save",type,String.class);
		addMessage(redirectAttributes, "保存${functionNameSimple}成功");

		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
	}
	
	@RequiresPermissions("${permissionPrefix}:edit")
	@RequestMapping(value = "delete")
	public String delete(${ClassName}Entity ${className}, RedirectAttributes redirectAttributes) {

    String apiBaseUrl = moduleLinkConfiguration.getLink("${moduleName}");

  	${ClassName} type = new ${ClassName}();
    BeanUtils.copyProperties(${className}, type);
		restTemplate.postForEntity(apiBaseUrl+"/${urlPrefix}/api/delete",type,String.class);

		addMessage(redirectAttributes, "删除${functionNameSimple}成功");
		return "redirect:"+Global.getAdminPath()+"/${viewPrefix}/?repage";
	}

	 /**
   * @param isNewRecord 是否为新记录
   * @param source 源对象
   */
  private ${ClassName} resolveBeanProperties(boolean isNewRecord, Object source) {
    User user = UserUtils.getUser();
    ${ClassName} ${className} = JsonUtils.toSimpleObject(JsonUtils.toJson(source), ${ClassName}.class);
    Date now = DateUtils.getNow();
     if (isNewRecord) {
      ${className}.setCreateDate(now);
      ${className}.setCreateBy(user.getName());
    }
    ${className}.setUpdateBy(user.getName());
    ${className}.setUpdateDate(now);
    return ${className};
  }

}]]>
  </content>
</template>